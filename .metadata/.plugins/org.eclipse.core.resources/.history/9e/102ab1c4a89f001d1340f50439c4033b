/**
 * 
 * @author tzaki
 * @version Oct 21, 2008
 *
 */
public class Player
{
     
     public static final int WHEELBARROW      = 0;
     public static final int BATTLESHIP       = 1;
     public static final int SACK_OF_MONEY    = 2;
     public static final int HORSE_AND_RIDER  = 3;
     public static final int CAR              = 4;
     public static final int THIMBLE          = 5;
     public static final int CANNON           = 6;
     public static final int BOOT             = 7;
     public static final int SCOTTISH_TERRIER = 8;
     public static final int IRON             = 9;
     public static final int TOP_HAT          = 10;
     
     private String name;
     private int space;
     private int money;
     private boolean doubles;
     private int whichPiece;
     private boolean inJail;
     
     public Player() 
     {
          
     }
     
     public Player(String n)
     {
          
     }
     
     public Player(String n, int piece)
     

}

/*

b.   The second class will be Player.java, which must include the following (which we will discuss together in class):
i.   Instance fields: name, space, money, doubles, whichPiece, inJail (should be boolean), and anything else we discuss and agree is relevant to the player. 
ii.  Constructor:  To make all our programs uniform, type your constructor so it responds to the following initialization (please inform me if you are going to add any extra parameters):

new Player (String name)

The rest of the instance fields (like space, money, etc.) should receive initial/default values inside the constructor’s code.
iii. Accessor and Mutator Methods: getName and possibly setName; get & setSpace as well as movePiece (moving the piece is different than setting the space); addDoubles, getDoubles, and resetDoubles (to zero); isInJail (returns inJail); getPiece, get & setMoney (allows you to send a positive OR negative value to add OR remove money); toString (which should return a nice neat String to print a player’s status in the game); and anything else relevant that we discuss.




*/