 
//<applet code="GameApplet.java" width="400" height="500"> the code did not work!</applet>

import java.applet.*;
import java.awt.*;
import java.awt.geom.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;

public class GameApplet extends Applet implements MouseListener
{
     
     private static final long serialVersionUID = 6599028514896642279L;
     
     public static final int RECTANGLE = 0;
     public static final int CIRCLE    = 1;

     private Grid    grid;
     private int     unitSize;
     private int     cellShape;
     private boolean gridIsVisible;
     private boolean fillCell;
     private boolean win; 
     private Color   gridColor;
     private Color   cellColor;
     private Color   backgroundColor;

     public void init()
     {          
          this.addMouseListener(this);
          
          grid            = new Grid(10);
          unitSize        = 50;
          cellShape       =  1;
          gridIsVisible   = true;
          fillCell        = false;
          win             = false; 
          gridColor       = Color.GRAY;
          cellColor       = Color.RED;
          backgroundColor = new Color(236, 236, 236);
          
          this.addMenuBar(this, grid)
          
          repaint();
     }
     
     /**
      * paints the component in a frame
      */
     public void paint(Graphics g)
     {
          Graphics2D g2 = (Graphics2D) g;
          
          if (win)
          {
               
          }
          else
          {
               g2.setColor(this.backgroundColor);
               g2.fillRect(0, 0, this.unitSize * this.grid.getSize(),
                         this.unitSize * this.grid.getSize());

               Rectangle2D.Double r;
               Ellipse2D.Double e = new Ellipse2D.Double();

               for (int i = 0; i < this.grid.getSize(); i++)
               {
                    for (int j = 0; j < this.grid.getSize(); j++)
                    {
                         r = new Rectangle2D.Double(i * this.unitSize, j
                                   * this.unitSize, this.unitSize,
                                   this.unitSize);
                         e = new Ellipse2D.Double(i * this.unitSize, j
                                   * this.unitSize, this.unitSize,
                                   this.unitSize);

                         // if is occupied, fill in cell
                         if (grid.isOccupied(i, j))
                         {
                              g2.setColor(this.cellColor);

                              if (this.cellShape == GridComponent.RECTANGLE)
                              {
                                   if (!fillCell)
                                   {
                                        r.setFrame(r.x + (this.unitSize / 5),
                                                  r.y + (this.unitSize / 5),
                                                  3 * (this.unitSize / 5),
                                                  3 * (this.unitSize / 5));
                                   }

                                   g2.fill(r);
                              }
                              else if (this.cellShape == GridComponent.CIRCLE)
                              {
                                   if (!fillCell)
                                   {
                                        e.setFrame(r.x + (this.unitSize / 5),
                                                  r.y + (this.unitSize / 5),
                                                  3 * (this.unitSize / 5),
                                                  3 * (this.unitSize / 5));
                                   }

                                   g2.fill(e);
                              }
                         }
                    }
               }

               if (gridIsVisible)
               {
                    g2.setColor(this.gridColor);
                    for (int i = 0; i <= this.grid.getSize(); i++)
                    {
                         g2.drawLine(i * this.unitSize, 0, i * this.unitSize,
                                   this.grid.getSize() * this.unitSize);
                         g2.drawLine(0, i * this.unitSize, this.grid.getSize()
                                   * this.unitSize, i * this.unitSize);
                    }
               }
          }

     }
     
     public static void addMenuBar(Applet window, final Grid g,
               final GridComponent grid)
     {
          JMenuBar mainMenu = new JMenuBar();

          JMenu file = new JMenu("File");
          JMenu reset = new JMenu("Reset");
          JMenuItem reset_a = new JMenuItem("All");
          JMenuItem reset_c = new JMenuItem("Color");
          JMenuItem redefine = new JMenuItem("Redefine");
          JMenuItem exit = new JMenuItem("Exit");

          JMenu options = new JMenu("Options");
          JMenu gridVisible = new JMenu("Show/Hide Grid");
          final JMenuItem grid_v = new JMenuItem("Change to Hidden");
          JMenu color = new JMenu("Colors");
          final JMenuItem color_g = new JMenuItem("Grid");
          final JMenuItem color_c = new JMenuItem("Cells");
          final JMenuItem color_b = new JMenuItem("Background");
          JMenu shape = new JMenu("Cell Shape");
          final JMenuItem shape_c = new JMenuItem("Circle");
          final JMenuItem shape_r = new JMenuItem("Rectangle");
          JMenu filled = new JMenu("Fill");
          final JMenuItem shape_f = new JMenuItem("Change to Filled");

          class exitListener implements ActionListener
          {
               public void actionPerformed(ActionEvent e)
               {
                    System.exit(-1);
               }
          }
          ActionListener listener0 = new exitListener();
          exit.addActionListener(listener0);

          class resetAllListener implements ActionListener
          {
               public void actionPerformed(ActionEvent e)
               {
               }
          }
          ActionListener listener1 = new resetAllListener();
          reset_a.addActionListener(listener1);

          class resetColorListener implements ActionListener
          {
               public void actionPerformed(ActionEvent e)
               {
               }
          }
          ActionListener listener1a = new resetColorListener();
          reset_c.addActionListener(listener1a);

          class redefineListener implements ActionListener
          {
               public void actionPerformed(ActionEvent e)
               {
               }
          }
          ActionListener listener1b = new redefineListener();
          redefine.addActionListener(listener1b);

          class gridVisibleListener implements ActionListener
          {
               public void actionPerformed(ActionEvent e)
               {
               }
          }
          ActionListener listener2 = new gridVisibleListener();
          grid_v.addActionListener(listener2);

          class colorGridListener implements ActionListener
          {
               public void actionPerformed(ActionEvent e)
               {
               }
          }
          ActionListener listener3 = new colorGridListener();
          color_g.addActionListener(listener3);

          class colorCellListener implements ActionListener
          {
               public void actionPerformed(ActionEvent e)
               {
               }
          }
          ActionListener listener4 = new colorCellListener();
          color_c.addActionListener(listener4);

          class colorBgListener implements ActionListener
          {
               public void actionPerformed(ActionEvent e)
               {
               }
          }
          ActionListener listener4a = new colorBgListener();
          color_b.addActionListener(listener4a);

          class cellRectangleListener implements ActionListener
          {
               public void actionPerformed(ActionEvent e)
               {
               }
          }
          ActionListener listener5 = new cellRectangleListener();
          shape_r.addActionListener(listener5);

          class cellCircleListener implements ActionListener
          {
               public void actionPerformed(ActionEvent e)
               {
               }
          }
          ActionListener listener6 = new cellCircleListener();
          shape_c.addActionListener(listener6);

          class filledCellListener implements ActionListener
          {
               public void actionPerformed(ActionEvent e)
               {
               }
          }
          ActionListener listener7 = new filledCellListener();
          shape_f.addActionListener(listener7);

          reset.add(reset_c);
          reset.add(reset_a);
          file.add(reset);
          file.add(redefine);
          file.add(exit);
          shape.add(shape_r);
          shape.add(shape_c);
          filled.add(shape_f);
          shape.add(filled);
          color.add(color_g);
          color.add(color_c);
          color.add(color_b);
          gridVisible.add(grid_v);
          options.add(gridVisible);
          options.add(color);
          options.add(shape);
          mainMenu.add(file);
          mainMenu.add(options);

          window.add(mainMenu, BorderLayout.NORTH);
     }     

     public Grid getGrid()
     {
          return this.grid;
     }

     public void setBoxSize(int s)
     {
          this.unitSize = s;
          this.repaint();
     }

     public void setVisibleGrid(boolean isVisible)
     {
          if (isVisible)
               gridIsVisible = true;
          if (!isVisible)
               gridIsVisible = false;
     }

     public boolean getVisibleGrid()
     {
          return gridIsVisible;
     }

     public void setCellShape(int shape)
     {
          if (shape == GridComponent.RECTANGLE)
               cellShape = GridComponent.RECTANGLE;
          else if (shape == GridComponent.CIRCLE)
               cellShape = GridComponent.CIRCLE;
     }

     public void setGridColor(Color c)
     {
          gridColor = c;
     }

     public void setCellColor(Color c)
     {
          cellColor = c;
     }

     public Color getGridColor()
     {
          return gridColor;
     }

     public Color getCellColor()
     {
          return cellColor;
     }

     public void setBackgroundColor(Color c)
     {
          backgroundColor = c;;
     }

     public Color getBackgroundColor()
     {
          return backgroundColor;
     }

     public void setCellsFilled(boolean f)
     {
          fillCell = f;
     }

     public boolean areCellsFilled()
     {
          return fillCell;
     }

     public void mouseExited(MouseEvent e)
     {}

     public void mouseEntered(MouseEvent e)
     {}

     public void mouseClicked(MouseEvent e)
     {}

     public void mousePressed(MouseEvent e)
     {}

     public void mouseReleased(MouseEvent e)
     {
          this.grid.click(Math.round((e.getY() / this.unitSize)), Math.round((e
                    .getX() / this.unitSize)));
          win = this.grid.checkWin();
          this.repaint();
     }

}
